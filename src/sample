#!/usr/bin/env python

# Copyright (c) 2020, zyq_hit, Inc.
# All rights reserved.
# This is a simple example for formation

from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import select as se
from numpy import *
import traceback
import sys, os
import rospy
import math
import tf
import cv2
import datetime

if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

from turtlebot.turtlebot_class import*    # import the turylrbot_class  
from turtlebot.turtlebot_visual import*


target_3D=[(-0.080287736758833828, -0.028566797723180576, 0.72583121061325073), 
           (-0.00090173848091813704, -0.028555051895741007, 0.72553277015686035), 
           (-0.00090181819149380462, 0.050802424787484327, 0.72559690475463867), 
           (-0.080294837593229251, 0.050823324169497162, 0.72589540481567383)]

def getKey():                             # get keyboard value
    if os.name == 'nt':
      return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = se.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key



if __name__=="__main__":                 # main function
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)
    rospy.init_node('turtlebot3_telep') #init a ros node
    Num=3
    agent=[]
    for i in range(0,Num):
        tb=turtlebot(i)                    #init a instance of turtlebot class                 
        agent.append(tb)
    ros_rate=rospy.Rate(50)             #set the cycle Time   
    lower_red = array([100, 43,46])
    upper_red = array([180, 255, 255])
    lower_blue = array([0, 43,46])
    upper_blue = array([10, 255, 255])

    try:  
        while(1):  
            frame=agent[2].rgb_image
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  
            aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250) 
            parameters =  aruco.DetectorParameters_create() 
            corners, ids, rejectedImgPoints = aruco.detectMarkers(gray, 
                                                          aruco_dict, 
                                                          parameters=parameters) 
            target_position=[]
            result1=array([0.0,0.0,0.0])
            if ids is not None:
                rvec, tvec, _ = aruco.estimatePoseSingleMarkers(corners, 0.15, camera_matrix, dist) 
                (rvec-tvec).any()
                for i in range(4):
                    image_p= corners[0][0,i]
                    u_ij=corners[0][0,i][0]
                    v_ij=corners[0][0,i][1]
                    target_position.append(getxyz(u_ij,v_ij,agent[2].depth_image[v_ij,u_ij],camera_param))
                    result1=result1+getxyz(u_ij,v_ij,agent[2].depth_image[v_ij,u_ij],camera_param)
                for i in range(rvec.shape[0]):
                    aruco.drawAxis(frame, camera_matrix, dist, rvec[i, :, :], tvec[i, :, :], 0.03)
                    aruco.drawDetectedMarkers(frame, corners,ids[i])
                
                success,rvec1,tvec1=cv2.solvePnP(array(target_3D),array(corners[0]),camera_matrix,distCoeffD)
                result1=result1/4
                cv2.putText(agent[2].rgb_image, str("x:")+str( target_position[0][2]), (int(corners[0][0,0][0])+100, int(corners[0][0,0][1])), font, 1.0, (0, 0, 255), 2)
                cv2.putText(agent[2].rgb_image, str("y:")+str( target_position[0][1]), (int(corners[0][0,0][0])+100, int(corners[0][0,0][1])+30), font, 1.0, (0, 0, 255), 2)
                cv2.putText(agent[2].rgb_image, str("z:")+str( target_position[0][0]), (int(corners[0][0,0][0])+100, int(corners[0][0,0][1])+60), font, 1.0, (0, 0, 255), 2)
                cv2.putText(agent[2].rgb_image, str("theta:")+str( -rvec1[1][0]), (int(corners[0][0,0][0])+100, int(corners[0][0,0][1])+90), font, 1.0, (0, 0, 255), 2)
                print result1
                print tvec/2
            else:  
                cv2.putText(frame, "No Ids", (0,64), font, 1, (0,255,0),2,cv2.LINE_AA)     
            imshow("1234", agent[2].rgb_image)

            waitKey(1)          
            key = getKey() #get the keyboard value when input is ctrl+c then exit 
            if (key == '\x03'):
                for i in range(0,Num):
                    agent[i].turtlebot_control(0,0)
                break
            ros_rate.sleep()
    
        
    except Exception as e:
        print(e)
        

    finally:
        for i in range(0,Num):
            agent[i].turtlebot_control(0,0)


    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
